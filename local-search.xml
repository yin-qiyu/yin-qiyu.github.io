<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jetson nanos使用deepstream+tensorrt部署yolov5</title>
    <link href="/2022/06/19/jetson-nanos%E4%BD%BF%E7%94%A8deepstream-tensorrt%E9%83%A8%E7%BD%B2yolov5/"/>
    <url>/2022/06/19/jetson-nanos%E4%BD%BF%E7%94%A8deepstream-tensorrt%E9%83%A8%E7%BD%B2yolov5/</url>
    
    <content type="html"><![CDATA[<p>目录</p><ul><li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li><li><a href="#%E7%8E%AF%E5%A2%83">环境</a></li><li><a href="#%E7%94%B5%E8%84%91%E4%B8%8A">电脑上</a></li><li><a href="#jetson%E4%B8%8A">jetson上</a><ul><li><a href="#%E6%90%AD%E5%BB%BAyolov5%E7%9A%84%E7%8E%AF%E5%A2%83">搭建yolov5的环境</a></li><li><a href="#%E5%85%8B%E9%9A%86tensorrtx">克隆tensorrtx</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95deepstream50">安装测试deepstream（5.0）</a><ul><li><a href="#%E5%AE%89%E8%A3%85ds-60">安装ds-6.0</a></li><li><a href="#yolov5%E6%A3%80%E6%B5%8B">yolov5检测</a></li></ul></li><li><a href="#%E5%9C%A8ds%E4%B8%AD%E8%B0%83%E7%94%A8csi-or-usb%E6%91%84%E5%83%8F%E5%A4%B4">在ds中调用csi or usb摄像头</a></li><li><a href="#%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE">插件配置</a><ul><li><a href="#%E8%A7%86%E9%A2%91%E8%BE%93%E5%85%A5">视频输入</a><ul><li><a href="#camera">camera</a></li><li><a href="#videofile">videofile</a></li><li><a href="#media-stream">media stream</a></li><li><a href="#%E5%A4%9A%E8%B7%AFusb">多路USB</a></li><li><a href="#%E5%A4%9A%E8%B7%AFcsi">多路CSI</a></li></ul></li><li><a href="#%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86">视频处理</a><ul><li><a href="#%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B">物体检测</a></li><li><a href="#%E7%89%A9%E4%BD%93%E8%B7%9F%E8%B8%AA">物体跟踪</a></li><li><a href="#%E6%A3%80%E6%B5%8B%E5%90%8E%E7%9A%84%E5%85%B7%E4%BD%93%E5%88%86%E7%B1%BB">检测后的具体分类</a></li></ul></li><li><a href="#%E8%A7%86%E9%A2%91%E8%BE%93%E5%87%BA">视频输出</a><ul><li><a href="#%E5%A4%9A%E8%B7%AF%E5%90%88%E5%B9%B6">多路合并</a></li><li><a href="#screen">screen</a></li><li><a href="#videofile-1">videofile</a></li><li><a href="#media-stream-1">media stream</a></li><li><a href="#osd">osd</a></li><li><a href="#streammux">streammux</a></li></ul></li><li><a href="#sample%E4%BE%8B%E7%A8%8B">Sample例程</a></li></ul></li><li><a href="#%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E5%9E%8B">部署自己的模型</a></li><li><a href="#references">References</a><ul><li><a href="#%E9%83%A8%E7%BD%B2">部署</a></li><li><a href="#deepstream">deepstream</a></li></ul></li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在主机上训练自己的Yolov5模型，转为TensorRT模型并部署到Jetson Nano上，用DeepStream运行。（先以yolov5s.pt为例）</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>硬件环境：</p><ul><li><p>带cuda的显卡主机</p></li><li><p>Jetson Nano 4G B01</p></li><li><p>csi摄像头、usb摄像头</p></li></ul><p>软件环境：</p><ul><li>yolov5-5.0</li><li>jetpack-4.4</li><li>deepstream-5.0</li><li>Tensorrt-7.1</li><li>Cuda-10.2</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220227222344603.png" alt="image-20220227222344603" width="500" /><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220227222435137.png" alt="image-20220227222435137" width="500" /><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220227222508150.png" alt="image-20220227222508150" width="500" /><h1 id="电脑上"><a href="#电脑上" class="headerlink" title="电脑上"></a>电脑上</h1><ul><li>下载yolov5</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> -b v5.0 https://github.com/ultralytics/yolov5.git<br>$ git <span class="hljs-built_in">clone</span> -b yolov5-v5.0 https://github.com/wang-xinyu/tensorrtx.git<br></code></pre></td></tr></table></figure><p>官方教程文档：</p><p><a href="https://github.com/wang-xinyu/tensorrtx/tree/yolov5-v5.0/yolov5">tensorrtx/yolov5 at yolov5-v5.0 · wang-xinyu/tensorrtx (github.com)</a></p><ul><li>若电脑上无法转engine在jetson也可以操作</li></ul><h1 id="jetson上"><a href="#jetson上" class="headerlink" title="jetson上"></a>jetson上</h1><h2 id="搭建yolov5的环境"><a href="#搭建yolov5的环境" class="headerlink" title="搭建yolov5的环境"></a>搭建yolov5的环境</h2><p>git clone <a href="https://github.com/ultralytics/yolov5.git">https://github.com/ultralytics/yolov5.git</a></p><p>python3 -m pip install –upgrade pip</p><p>进入yolov5的项目里</p><p>pip3 install -r requirements </p><p>若出现pillow相关报错：pillow需要pip3 uninstall重新pip3 install pillow</p><h2 id="克隆tensorrtx"><a href="#克隆tensorrtx" class="headerlink" title="克隆tensorrtx"></a>克隆tensorrtx</h2><p>仓库： <a href="https://github.com/wang-xinyu/tensorrtx.git">https://github.com/wang-xinyu/tensorrtx.git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/wang-xinyu/tensorrtx.git<br></code></pre></td></tr></table></figure><p>将生成的.wts放到tensorrtx/yolov5/下</p><p>若是自己训练的模型需修改<code>tensorrtx/yolov5/yololayer.h</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">static constexpr int CLASS_NUM = 80<br></code></pre></td></tr></table></figure><p>编译代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &#123;tensorrtx&#125;/yolov5/<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br><span class="hljs-built_in">cp</span> &#123;ultralytics&#125;/yolov5/yolov5s.wts &#123;tensorrtx&#125;/yolov5/build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><p>将生成的.wts文件转为.engine文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./yolov5 -s yolov5s.wts yolov5s.engine s<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220405204625542.png" alt="image-20220405204625542" width="500" /><p>将要测试的图片放到tensorrtx/yolov5/samples/下，测试能否检测目标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./yolov5 -d ../best.engine ../samples<br></code></pre></td></tr></table></figure><p>经过测试转成tensorrt后推理速度大幅加快</p><p>图片大小：640*640</p><ul><li>Yolov5.s推理速度在130ms左右</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220310143041733.png" alt="image-20220310143041733" width="500"  /><ul><li>转换成tensorrt后的推理速度在70ms左右</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220310143135601.png" alt="image-20220310143135601" width="500" /><h1 id="安装测试deepstream（5-0）"><a href="#安装测试deepstream（5-0）" class="headerlink" title="安装测试deepstream（5.0）"></a>安装测试deepstream（5.0）</h1><p>:bangbang:<strong>一定要在官方文档中查看deepstream和jetpack相对应的版本，如Jetpack 4.6 support Deepstream 6.0</strong></p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220302114638745.png" alt="image-20220302114638745"  width="500" /><p>官方文档：<a href="https://docs.nvidia.com/metropolis/#page/DeepStream_Plugin_Manual/deepstream_plugin_faq.html%23wwpID0EGHA">NVIDIA Metropolis Documentation</a></p><p>官网下载：<a href="https://developer.nvidia.com/deepstream-getting-started">DeepStream Getting Started | NVIDIA Developer</a></p><p>老版本：<a href="https://developer.nvidia.com/embedded/deepstream-on-jetson-downloads-archived">NVIDIA DeepStream SDK on Jetson (Archived) | NVIDIA Developer</a></p><ul><li>精简版笔记</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install \<br>    libssl1.0.0 \<br>    libgstreamer1.0-0 \<br>    gstreamer1.0-tools \<br>    gstreamer1.0-plugins-good \<br>    gstreamer1.0-plugins-bad \<br>    gstreamer1.0-plugins-ugly \<br>    gstreamer1.0-libav \<br>    libgstrtspserver-1.0-0 \<br>    libjansson4=2.11-1<br>$ sudo apt-get install librdkafka1=0.11.3-1build1<br>$ tar -xpvf deepstream_sdk_v4.0.2_jetson.tbz2<br>$ <span class="hljs-built_in">cd</span> deepstream_sdk_v4.0.2_jetson<br>$ sudo tar -xvpf binaries.tbz2 -C /<br>$ sudo ./install.sh<br>$ sudo ldconfig<br></code></pre></td></tr></table></figure><ul><li>详细版</li></ul><ol><li>安装测试ds(官方release有详细文档)</li></ol><p>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install \<br>libssl1.0.0 \<br>libgstreamer1.0-0 \<br>gstreamer1.0-tools \<br>gstreamer1.0-plugins-good \<br>gstreamer1.0-plugins-bad \<br>gstreamer1.0-plugins-ugly \<br>gstreamer1.0-libav \<br>libgstrtspserver-1.0-0 \<br>libjansson4=2.11-1<br></code></pre></td></tr></table></figure><ol start="2"><li><p>下载sdk放入jetson</p></li><li><p>提取解压sdk</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar -xvf deepstream_sdk_v5.1.0_jetson.tbz2 -C /<br><span class="hljs-built_in">cd</span> /opt/nvidia/deepstream/deepstream-5.1<br>sudo ./install.sh<br>sudo ldconfig<br></code></pre></td></tr></table></figure><ol start="4"><li>安装完成后测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/nvidia/deepstream/deepstream-5.0/samples/configs/deepstream-app/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deepstream-app -c source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_nano.txt<br></code></pre></td></tr></table></figure><h2 id="安装ds-6-0"><a href="#安装ds-6-0" class="headerlink" title="安装ds-6.0"></a>安装ds-6.0</h2><p><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_Quickstart.html#jetson-setup">Quickstart Guide — DeepStream 6.0 Release documentation (nvidia.com)</a></p><p><a href="https://github.com/rscgg37248/DeepStream6.0_Yolov5-6.0">rscgg37248/DeepStream6.0_Yolov5-6.0: 基于DeepStream6.0和yolov5-6.0的目标检测 (github.com)</a></p><ul><li>Install</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install \<br>libssl1.0.0 \<br>libgstreamer1.0-0 \<br>gstreamer1.0-tools \<br>gstreamer1.0-plugins-good \<br>gstreamer1.0-plugins-bad \<br>gstreamer1.0-plugins-ugly \<br>gstreamer1.0-libav \<br>libgstrtspserver-1.0-0 \<br>libjansson4=2.11-1<br><br>$ sudo tar -xvf deepstream_sdk_v6.0.0_jetson.tbz2 -C /<br>$ <span class="hljs-built_in">cd</span> /opt/nvidia/deepstream/deepstream-6.0<br>$ sudo ./install.sh<br>$ sudo ldconfig<br></code></pre></td></tr></table></figure><ul><li>Test</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /opt/nvidia/deepstream/deepstream-6.0/samples/configs/deepstream-app/<br><br>$ deepstream-app -c source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_nano.txt<br></code></pre></td></tr></table></figure><h2 id="yolov5检测"><a href="#yolov5检测" class="headerlink" title="yolov5检测"></a>yolov5检测</h2><p>:bangbang:<strong>Jetson nano的系统版本是4.5.1 TensorRT版本7.x yolov5版本 5.0 pillow需要pip3 uninstall重新pip3 install pillow</strong></p><p>安装完ds后在/opt/nvidia/deepstream/deepstream-5.0/sources/objectDetector_Yolo会有一个部署yolo的官方实例代码，但只有yolov3的。</p><p>github上有已经改好yolov5的项目：<a href="https://github.com/DanaHan/Yolov5-in-Deepstream-5.0">DanaHan/Yolov5-in-Deepstream-5.0: Describe how to use yolov5 in Deepstream 5.0 (github.com)</a></p><p>我使用的tensorrt7的版本在里面有适配的分支：<a href="https://github.com/Abandon-ht/Yolov5-in-Deepstream-5.0/tree/tensorrt7">Abandon-ht/Yolov5-in-Deepstream-5.0 at tensorrt7 (github.com)</a></p><p>克隆项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/DanaHan/Yolov5-in-Deepstream-5.0.git<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Yolov5-in-Deepstream-5.0/Deepstream 5.0<br><br><span class="hljs-comment">#复制coco数据集的labels</span><br><span class="hljs-built_in">cp</span> ~/darknet/data/coco.names ./labels.txt<br><br><span class="hljs-comment">#复制之前生成的引擎文件到当前目录</span><br><span class="hljs-built_in">cp</span> ~/tensorrtx/yolov5/build/yolov5s.engine ./<br><br><span class="hljs-built_in">cd</span> nvdsinfer_custom_impl_Yolo<br><br><span class="hljs-comment"># 生成libnvdsinfer_custom_impl_Yolo.so文件</span><br>make -j <br><br><span class="hljs-comment">#返回到DeepStream5.0/下</span><br><span class="hljs-built_in">cd</span> .. <br><br><span class="hljs-comment">#测试</span><br>LD_PRELOAD=./libmyplugins.so deepstream-app -c deepstream_app_config_yoloV5.txt<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220227180343701.png" alt="image-20220227180343701" style="zoom: 25%;" /><h1 id="在ds中调用csi-or-usb摄像头"><a href="#在ds中调用csi-or-usb摄像头" class="headerlink" title="在ds中调用csi or usb摄像头"></a>在ds中调用csi or usb摄像头</h1><p>参考资料<a href="http://www.elecfans.com/d/1677110.html">如何在deepstream-app里调用USB与CSI摄像头-电子发烧友网 (elecfans.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装v4l-utils</span><br>apt-get install v4l-utils<br><br><span class="hljs-comment">#查看摄像头信息</span><br>v4l2-ctl --list-devices<br></code></pre></td></tr></table></figure><p>查看摄像头可用分辨率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">v4l2-ctl --list-formats-ext --device=0<br>v4l2-ctl --list-formats-ext --device=1<br></code></pre></td></tr></table></figure><p>修改deepstream_app_config_yoloV5.txt的source</p><p>我个人使用的是罗技的<code>c920</code>摄像头（usb）</p><p>参数如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[source0]<br><span class="hljs-built_in">enable</span>=1<br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI</span><br><span class="hljs-built_in">type</span>=1<br>camera-width=1280<br>camera-height=720<br>camera-fps-n=30<br>camera-v4l2-dev-node=0<br><span class="hljs-comment">#uri=file://../../samples/streams/sample_1080p_h264.mp4</span><br>num-sources=1<br>gpu-id=0<br><span class="hljs-comment"># (0): memtype_device   - Memory type Device</span><br><span class="hljs-comment"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="hljs-comment"># (2): memtype_unified  - Memory type Unified</span><br>cudadec-memtype=0<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/C2A46195D3579CC5DBF107815D2DB515.jpg" alt="C2A46195D3579CC5DBF107815D2DB515" style="zoom:25%;" /><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><p>参考deepstream_sdk_v4.0.2_jetson/samples/configs/deepstream-app/下的配置文件:</p><ul><li><p>source30_1080p_resnet_dec_infer_tiled_display_int8.txt：演示具有主要推理功能的30个流解码。（仅适用于dGPU和Jetson AGX Xavier平台。）</p></li><li><p>source4_1080p_resnet_dec_infer_tiled_display_int8.txt：演示具有主要推理，对象跟踪和三个不同辅助分类器的四个流解码。（仅适用于dGPU和Jetson AGX Xavier平台。）</p></li><li><p>source4_1080p_resnet_dec_infer_tracker_sgie_tiled_display_int8_gpu1.txt：在GPU 1上针对主要推理，对象跟踪和三个不同的二级分类器演示四个流解码（对于具有多个GPU卡的系统）。仅适用于dGPU平台。</p></li><li><p>config_infer_primary.txt：将 nvinfer元素配置为主要检测器。</p></li><li><p>config_infer_secondary_carcolor.txt， config_infer_secondary_carmake.txt， config_infer_secondary_vehicletypes.txt：将 nvinfer元素配置为辅助分类器。</p></li><li><p>iou_config.txt：配置一个低级的IOU（联合路口）跟踪器。</p></li><li><p>source1_usb_dec_infer_resnet_int8.txt：演示一台USB摄像机作为输入。</p></li><li><p>source1_csi_dec_infer_resnet_int8.txt：演示一个CSI摄像机作为输入；仅限于Jetson。</p></li><li><p>source2_csi_usb_dec_infer_resnet_int8.txt：演示一台CSI摄像机和一台USB摄像机作为输入；仅限于Jetson。</p></li><li><p>source6_csi_dec_infer_resnet_int8.txt：演示六个CSI摄像机作为输入；仅限于Jetson。</p></li><li><p>source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_nano.txt：演示8解码+推断+跟踪器；仅适用于Jetson Nano。</p></li><li><p>source8_1080p_dec_infer-resnet_tracker_tiled_display_fp16_tx1.txt：演示8解码+推断+跟踪器；仅适用于Jetson TX1。</p></li><li><p>source12_1080p_dec_infer-resnet_tracker_tiled_display_fp16_tx2.txt：演示12个解码+推断+跟踪器；仅适用于Jetson TX2。</p></li></ul><h2 id="视频输入"><a href="#视频输入" class="headerlink" title="视频输入"></a>视频输入</h2><ul><li>默认测试视频</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs bash">[application]<br>enable-perf-measurement=1<br>perf-measurement-interval-sec=5<br><span class="hljs-comment">#gie-kitti-output-dir=streamscl</span><br><br>[tiled-display]<br><span class="hljs-built_in">enable</span>=0<br>rows=1<br>columns=1<br>width=1280<br>height=720<br>gpu-id=0<br><span class="hljs-comment">#(0): nvbuf-mem-default - Default memory allocated, specific to particular platform</span><br><span class="hljs-comment">#(1): nvbuf-mem-cuda-pinned - Allocate Pinned/Host cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(2): nvbuf-mem-cuda-device - Allocate Device cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(3): nvbuf-mem-cuda-unified - Allocate Unified cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(4): nvbuf-mem-surface-array - Allocate Surface Array memory, applicable for Jetson</span><br>nvbuf-memory-type=0<br><br>[source0]<br><span class="hljs-built_in">enable</span>=1<br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI</span><br><span class="hljs-built_in">type</span>=2<br>uri=file:/opt/nvidia/deepstream/deepstream-6.0/samples/streams/sample_1080p_h264.mp4<br><span class="hljs-comment">#uri=file:/home/nvidia/Documents/5-Materials/Videos/0825.avi</span><br>num-sources=1<br>gpu-id=0<br><span class="hljs-comment"># (0): memtype_device   - Memory type Device</span><br><span class="hljs-comment"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="hljs-comment"># (2): memtype_unified  - Memory type Unified</span><br>cudadec-memtype=0<br><br><br>[sink0]<br><span class="hljs-built_in">enable</span>=1<br><span class="hljs-comment">#Type - 1=FakeSink 2=EglSink 3=File</span><br><span class="hljs-built_in">type</span>=2<br><span class="hljs-built_in">sync</span>=0<br>source-id=0<br>gpu-id=0<br>nvbuf-memory-type=0<br><span class="hljs-comment">#1=mp4 2=mkv</span><br>container=1<br><span class="hljs-comment">#1=h264 2=h265</span><br>codec=1<br>output-file=yolov4.mp4<br><br>[osd]<br><span class="hljs-built_in">enable</span>=1<br>gpu-id=0<br>border-width=1<br>text-size=12<br>text-color=1;1;1;1;<br>text-bg-color=0.3;0.3;0.3;1<br>font=Serif<br>show-clock=0<br>clock-x-offset=800<br>clock-y-offset=820<br>clock-text-size=12<br>clock-color=1;0;0;0<br>nvbuf-memory-type=0<br><br>[streammux]<br>gpu-id=0<br><span class="hljs-comment">##Boolean property to inform muxer that sources are live</span><br>live-source=0<br>batch-size=4<br><span class="hljs-comment">##time out in usec, to wait after the first buffer is available</span><br><span class="hljs-comment">##to push the batch even if the complete batch is not formed</span><br>batched-push-timeout=40000<br><span class="hljs-comment">## Set muxer output width and height</span><br>width=1280<br>height=720<br><span class="hljs-comment">##Enable to maintain aspect ratio wrt source, and allow black borders, works</span><br><span class="hljs-comment">##along with width, height properties</span><br>enable-padding=0<br>nvbuf-memory-type=0<br><br><span class="hljs-comment"># config-file property is mandatory for any gie section.</span><br><span class="hljs-comment"># Other properties are optional and if set will override the properties set in</span><br><span class="hljs-comment"># the infer config file.</span><br>[primary-gie]<br><span class="hljs-built_in">enable</span>=1<br>gpu-id=0<br>model-engine-file=yolov5s.engine<br>labelfile-path=labels.txt<br><span class="hljs-comment">#batch-size=1</span><br><span class="hljs-comment">#Required by the app for OSD, not a plugin property</span><br>bbox-border-color0=1;0;0;1<br>bbox-border-color1=0;1;1;1<br>bbox-border-color2=0;0;1;1<br>bbox-border-color3=0;1;0;1<br>interval=0<br>gie-unique-id=1<br>nvbuf-memory-type=0<br>config-file=config_infer_primary_yoloV5.txt<br><br>[tracker]<br><span class="hljs-built_in">enable</span>=0<br>tracker-width=512<br>tracker-height=320<br>ll-lib-file=/opt/nvidia/deepstream/deepstream-5.0/lib/libnvds_mot_klt.so<br><br>[tests]<br>file-loop=0<br></code></pre></td></tr></table></figure><h4 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h4><ul><li>USB摄像头</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">camera-v4l2-dev-node</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>CSI摄像头</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220309232709200.png" alt="image-20220309232709200" style="zoom:50%;" /><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP 5=CSI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">camera-csi-sensor-id</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="videofile"><a href="#videofile" class="headerlink" title="videofile"></a>videofile</h4><p>4个相同文件，用MultiURI</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">uri</span>=file://../../streams/sample_1080p_h264.mp4<br><span class="hljs-attr">num-sources</span>=<span class="hljs-number">4</span><br><span class="hljs-comment">#drop-frame-interval=2</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># (0): memtype_device   - Memory type Device</span><br><span class="hljs-comment"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="hljs-comment"># (2): memtype_unified  - Memory type Unified</span><br><span class="hljs-attr">cudadec-memtype</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="media-stream"><a href="#media-stream" class="headerlink" title="media stream"></a>media stream</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">4</span><br><span class="hljs-attr">uri</span>=rtsp://admin:admin123@<span class="hljs-number">192.168</span>.<span class="hljs-number">1.106</span>:<span class="hljs-number">554</span>/cam/realmonitor?channel=<span class="hljs-number">1</span>&amp;subtype=<span class="hljs-number">0</span><br><span class="hljs-attr">num-sources</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#drop-frame-interval=2</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># (0): memtype_device   - Memory type Device</span><br><span class="hljs-comment"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="hljs-comment"># (2): memtype_unified  - Memory type Unified</span><br><span class="hljs-attr">cudadec-memtype</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="多路USB"><a href="#多路USB" class="headerlink" title="多路USB"></a>多路USB</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">uri</span>=file://../../streams/sample_1080p_h264.mp4<br><span class="hljs-attr">num-sources</span>=<span class="hljs-number">4</span><br><span class="hljs-comment">#drop-frame-interval=2</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># (0): memtype_device   - Memory type Device</span><br><span class="hljs-comment"># (1): memtype_pinned   - Memory type Host Pinned</span><br><span class="hljs-comment"># (2): memtype_unified  - Memory type Unified</span><br><span class="hljs-attr">cudadec-memtype</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="多路CSI"><a href="#多路CSI" class="headerlink" title="多路CSI"></a>多路CSI</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP 5=CSI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">camera-csi-sensor-id</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br><br><span class="hljs-section">[source1]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP 5=CSI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">camera-csi-sensor-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br><br><span class="hljs-section">[source2]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP 5=CSI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">camera-csi-sensor-id</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br><br><span class="hljs-section">[source3]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP 5=CSI</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">camera-csi-sensor-id</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">camera-width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">camera-height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">camera-fps-n</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">camera-fps-d</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h2><h4 id="物体检测"><a href="#物体检测" class="headerlink" title="物体检测"></a>物体检测</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># config-file property is mandatory for any gie section.</span><br><span class="hljs-comment"># Other properties are optional and if set will override the properties set in</span><br><span class="hljs-comment"># the infer config file.</span><br><span class="hljs-section">[primary-gie]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">model-engine-file</span>=../../models/Primary_Detector/resnet10.caffemodel_b30_int8.engine<br><span class="hljs-comment">#Required to display the PGIE labels, should be added even when using config-file</span><br><span class="hljs-comment">#property</span><br><span class="hljs-attr">batch-size</span>=<span class="hljs-number">4</span><br><span class="hljs-comment">#Required by the app for OSD, not a plugin property</span><br><span class="hljs-attr">bbox-border-color0</span>=<span class="hljs-number">1</span><span class="hljs-comment">;0;0;1</span><br><span class="hljs-attr">bbox-border-color1</span>=<span class="hljs-number">0</span><span class="hljs-comment">;1;1;1</span><br><span class="hljs-attr">bbox-border-color2</span>=<span class="hljs-number">0</span><span class="hljs-comment">;0;1;1</span><br><span class="hljs-attr">bbox-border-color3</span>=<span class="hljs-number">0</span><span class="hljs-comment">;1;0;1</span><br><span class="hljs-attr">interval</span>=<span class="hljs-number">0</span><br><span class="hljs-comment">#Required by the app for SGIE, when used along with config-file property</span><br><span class="hljs-attr">gie-unique-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">config-file</span>=config_infer_primary.txt<br></code></pre></td></tr></table></figure><h4 id="物体跟踪"><a href="#物体跟踪" class="headerlink" title="物体跟踪"></a>物体跟踪</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[tracker]<br>enable=<span class="hljs-number">1</span><br>tracker-width=<span class="hljs-number">640</span><br>tracker-height=<span class="hljs-number">368</span><br>#tracker-width=<span class="hljs-number">480</span><br>#tracker-height=<span class="hljs-number">272</span><br><br>#ll-lib-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/opt/</span>nvidia<span class="hljs-regexp">/deepstream/</span>deepstream-<span class="hljs-number">4.0</span><span class="hljs-regexp">/lib/</span>libnvds_mot_iou.so<br>#ll-lib-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/opt/</span>nvidia<span class="hljs-regexp">/deepstream/</span>deepstream-<span class="hljs-number">4.0</span><span class="hljs-regexp">/lib/</span>libnvds_nvdcf.so<br>ll-lib-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/opt/</span>nvidia<span class="hljs-regexp">/deepstream/</span>deepstream-<span class="hljs-number">4.0</span><span class="hljs-regexp">/lib/</span>libnvds_mot_klt.so<br>#ll-config-<span class="hljs-keyword">file</span> required <span class="hljs-keyword">for</span> DCF/IOU only<br>#ll-config-<span class="hljs-keyword">file</span>=tracker_config.yml<br>#ll-config-<span class="hljs-keyword">file</span>=iou_config.txt<br>gpu-id=<span class="hljs-number">0</span><br>#enable-batch-process applicable to DCF only<br>enable-batch-process=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="检测后的具体分类"><a href="#检测后的具体分类" class="headerlink" title="检测后的具体分类"></a>检测后的具体分类</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[secondary-gie0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">model-engine-file</span>=../../models/Secondary_VehicleTypes/resnet18.caffemodel_b16_int8.engine<br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">batch-size</span>=<span class="hljs-number">16</span><br><span class="hljs-attr">gie-unique-id</span>=<span class="hljs-number">4</span><br><span class="hljs-attr">operate-on-gie-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">operate-on-class-ids</span>=<span class="hljs-number">0</span><span class="hljs-comment">;</span><br><span class="hljs-attr">config-file</span>=config_infer_secondary_vehicletypes.txt<br><br><span class="hljs-section">[secondary-gie1]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">model-engine-file</span>=../../models/Secondary_CarColor/resnet18.caffemodel_b16_int8.engine<br><span class="hljs-attr">batch-size</span>=<span class="hljs-number">16</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gie-unique-id</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">operate-on-gie-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">operate-on-class-ids</span>=<span class="hljs-number">0</span><span class="hljs-comment">;</span><br><span class="hljs-attr">config-file</span>=config_infer_secondary_carcolor.txt<br><br><span class="hljs-section">[secondary-gie2]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">model-engine-file</span>=../../models/Secondary_CarMake/resnet18.caffemodel_b16_int8.engine<br><span class="hljs-attr">batch-size</span>=<span class="hljs-number">16</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gie-unique-id</span>=<span class="hljs-number">6</span><br><span class="hljs-attr">operate-on-gie-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">operate-on-class-ids</span>=<span class="hljs-number">0</span><span class="hljs-comment">;</span><br><span class="hljs-attr">config-file</span>=config_infer_secondary_carmake.txt<br></code></pre></td></tr></table></figure><h2 id="视频输出"><a href="#视频输出" class="headerlink" title="视频输出"></a>视频输出</h2><h4 id="多路合并"><a href="#多路合并" class="headerlink" title="多路合并"></a>多路合并</h4><p>单路</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[tiled-display]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">rows</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">columns</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">720</span><br></code></pre></td></tr></table></figure><p>多路</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[tiled-display]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">rows</span>=<span class="hljs-number">4</span><br><span class="hljs-attr">columns</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">720</span><br><span class="hljs-attr">gpu-id</span>=<span class="hljs-number">0</span><br><span class="hljs-comment">#(0): nvbuf-mem-default - Default memory allocated, specific to particular platform</span><br><span class="hljs-comment">#(1): nvbuf-mem-cuda-pinned - Allocate Pinned/Host cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(2): nvbuf-mem-cuda-device - Allocate Device cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(3): nvbuf-mem-cuda-unified - Allocate Unified cuda memory, applicable for Tesla</span><br><span class="hljs-comment">#(4): nvbuf-mem-surface-array - Allocate Surface Array memory, applicable for Jetson</span><br><span class="hljs-attr">nvbuf-memory-type</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[sink0]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=FakeSink 2=EglSink 3=File 4=RTSPStreaming 5=Overlay</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">sync</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">display-id</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">offset-x</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">offset-y</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">width</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">overlay-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">source-id</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="videofile-1"><a href="#videofile-1" class="headerlink" title="videofile"></a>videofile</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[sink1]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">3</span><br><span class="hljs-comment">#1=mp4 2=mkv</span><br><span class="hljs-attr">container</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#1=h264 2=h265 3=mpeg4</span><br><span class="hljs-attr">codec</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">sync</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">bitrate</span>=<span class="hljs-number">2000000</span><br><span class="hljs-attr">output-file</span>=out.mp4<br><span class="hljs-attr">source-id</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="media-stream-1"><a href="#media-stream-1" class="headerlink" title="media stream"></a>media stream</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[sink2]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#Type - 1=FakeSink 2=EglSink 3=File 4=RTSPStreaming 5=Overlay</span><br><span class="hljs-attr">type</span>=<span class="hljs-number">4</span><br><span class="hljs-comment">#1=h264 2=h265</span><br><span class="hljs-attr">codec</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">sync</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">bitrate</span>=<span class="hljs-number">4000000</span><br><span class="hljs-comment"># set below properties in case of RTSPStreaming</span><br><span class="hljs-attr">rtsp-port</span>=<span class="hljs-number">8554</span><br><span class="hljs-attr">udp-port</span>=<span class="hljs-number">5400</span><br></code></pre></td></tr></table></figure><p>vlc打开网络流 rtsp://192.168.0.118:8554/ds-test</p><h4 id="osd"><a href="#osd" class="headerlink" title="osd"></a>osd</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[osd]</span><br><span class="hljs-attr">enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">border-width</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">text-size</span>=<span class="hljs-number">15</span><br><span class="hljs-attr">text-color</span>=<span class="hljs-number">1</span><span class="hljs-comment">;1;1;1;</span><br><span class="hljs-attr">text-bg-color</span>=<span class="hljs-number">0.3</span><span class="hljs-comment">;0.3;0.3;1</span><br><span class="hljs-attr">font</span>=Serif<br><span class="hljs-attr">show-clock</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">clock-x-offset</span>=<span class="hljs-number">800</span><br><span class="hljs-attr">clock-y-offset</span>=<span class="hljs-number">820</span><br><span class="hljs-attr">clock-text-size</span>=<span class="hljs-number">12</span><br><span class="hljs-attr">clock-color</span>=<span class="hljs-number">1</span><span class="hljs-comment">;0;0;0</span><br></code></pre></td></tr></table></figure><h4 id="streammux"><a href="#streammux" class="headerlink" title="streammux"></a>streammux</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[streammux]</span><br><span class="hljs-comment">##Boolean property to inform muxer that sources are live</span><br><span class="hljs-attr">live-source</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">## 根据路数进行设置</span><br><span class="hljs-attr">batch-size</span>=<span class="hljs-number">4</span> <br><span class="hljs-comment">##time out in usec, to wait after the first buffer is available</span><br><span class="hljs-comment">##to push the batch even if the complete batch is not formed</span><br><span class="hljs-attr">batched-push-timeout</span>=<span class="hljs-number">40000</span><br><span class="hljs-comment">## Set muxer output width and height</span><br><span class="hljs-attr">width</span>=<span class="hljs-number">1280</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">720</span><br></code></pre></td></tr></table></figure><h2 id="Sample例程"><a href="#Sample例程" class="headerlink" title="Sample例程"></a>Sample例程</h2><ul><li>DeepStream Sample App /sources/apps/sample_apps/deepstream-app</li></ul><blockquote><p>说明:端到端示例演示了4级联神经网络(1个一级检测器和3个二级分类器)的多相机流，并显示平铺输出。</p></blockquote><ul><li><p>DeepStream Test 1 /sources/apps/sample_apps/deepstream-t</p></li><li><p>DeepStream Test 2 /sources/apps/sample_apps/deepstream-test2</p></li></ul><blockquote><p>说明:简单的应用程序，建立在test1之上，显示额外的属性，如跟踪和二级分类属性。</p></blockquote><ul><li>DeepStream Test 3 /sources/apps/sample_apps/deepstream-test3</li></ul><blockquote><p>说明:简单的应用程序，建立在test1的基础上，显示多个输入源和批处理使用nvstreammuxer。</p></blockquote><ul><li>DeepStream Test 4 /sources/apps/sample_apps/deepstream-test4</li></ul><blockquote><p>说明:这是在Test1示例的基础上构建的，演示了“nvmsgconv”和“nvmsgbroker”插件在物联网连接管道中的使用。对于test4，用户必须修改kafka代理连接字符串才能成功连接。需要安装分析服务器docker之前运行test4。DeepStream分析文档有关于设置分析服务器的更多信息。</p></blockquote><ul><li>FasterRCNN Object Detector /sources/objectDetector_FasterRCNN</li></ul><blockquote><p>说明:FasterRCNN物体探测器实例。</p></blockquote><ul><li>SSD Object Detector /sources/objectDetector_SSD</li></ul><blockquote><p>说明:SSD目标探测器实例。</p></blockquote><h1 id="部署自己的模型"><a href="#部署自己的模型" class="headerlink" title="部署自己的模型"></a>部署自己的模型</h1><p><a href="https://blog.csdn.net/ailaier/article/details/116270962">Jetson nano上部署自己的Yolov5模型（TensorRT加速）_ailaier的专栏-CSDN博客_jetson nano yolov5</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li><p><a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_custom_YOLO.html">Custom YOLO Model in the DeepStream YOLO App — DeepStream 6.0 Release documentation (nvidia.com)</a></p></li><li><p><a href="https://blog.csdn.net/sshheennddee123/article/details/121060158">Jetson nano部署过程记录：yolov5s+TensorRT+Deepstream检测usb摄像头_sshheennddee123的博客-CSDN博客</a></p></li><li><p><a href="https://www.bilibili.com/read/cv11869887">Jetson nano从烧录系统到DeepStream+TensorRT+yolov5检测CSI摄像头视频 - 哔哩哔哩 (bilibili.com)</a></p></li><li><p><a href="https://blog.csdn.net/ailaier/article/details/116270962">Jetson nano上部署自己的Yolov5模型（TensorRT加速）_ailaier的专栏-CSDN博客_jetson nano yolov5</a></p></li><li><p><a href="https://github.com/rscgg37248/DeepStream6.0_Yolov5-6.0">rscgg37248/DeepStream6.0_Yolov5-6.0: 基于DeepStream6.0和yolov5-6.0的目标检测 (github.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/391513840">NVIDIA Jetson Nano 2GB 系列文章（30）：DeepStream 摄像头“实时性能” - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://blog.csdn.net/ailaier/article/details/116270962"> Jetson nano上部署自己的Yolov5模型（TensorRT加速）_ailaier的专栏-CSDN博客_jetson nano yolov5</a></p></li></ul><h2 id="deepstream"><a href="#deepstream" class="headerlink" title="deepstream"></a>deepstream</h2><ul><li><p><a href="https://docs.nvidia.com/metropolis/deepstream/4.0/dev-guide/index.html#page/DeepStream_Development_Guide%2Fdeepstream_app_config.3.2.html%23wwpID0E0WB0HA">DeepStream Development Guide (nvidia.com)</a></p></li><li><p><a href="http://openjetson.com/index.php/2020/12/21/deepstream/">Deepstream使用 – OpenJetson</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1524712">关于NVIDIA Deepstream SDK压箱底的资料都在这里了 - 云+社区 - 腾讯云 (tencent.com)</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>jetson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jetson nano环境配置</title>
    <link href="/2022/06/19/jetson-nano%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/19/jetson-nano%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p> 目录</p><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">基本环境配置</a><ul><li><a href="#%E6%A3%80%E6%9F%A5nvcc">检查nvcc</a></li><li><a href="#%E5%AE%89%E8%A3%85torch%E5%92%8Cvision%E5%8F%AF%E5%BF%BD%E7%95%A5">安装torch和vision（可忽略）</a></li></ul></li><li><a href="#jetson-nao%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">jetson nao其他配置</a><ul><li><a href="#%E6%9B%B4%E6%96%B0%E9%95%9C%E5%83%8F%E6%BA%90">更新镜像源</a><ul><li><a href="#apt">apt</a></li><li><a href="#pip">pip</a></li><li><a href="#docker">docker</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85pytorch%E5%92%8Ctorchvison">安装pytorch和torchvison</a></li><li><a href="#miniforge%E5%8C%85%E7%AE%A1%E7%90%86%E9%80%89">miniforge包管理(选)</a><ul><li><a href="#miniforge%E7%AE%80%E4%BB%8B">miniforge简介</a></li><li><a href="#%E5%AE%89%E8%A3%85miniforge">安装miniforge</a></li><li><a href="#%E5%AE%89%E8%A3%85pytorchtorchvision">安装pytorch、torchvision</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%96%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">安装新的虚拟环境</a></li><li><a href="#pytorch18">pytorch1.8</a></li><li><a href="#orchvision-v090">orchvision v0.9.0</a></li></ul></li><li><a href="#%E6%9F%A5%E7%9C%8Bjetson%E4%BF%A1%E6%81%AF-jtop">查看jetson信息 （jtop）</a></li><li><a href="#%E9%A3%8E%E6%89%87%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6">风扇自动控制</a></li><li><a href="#%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F">增加Swap分区大小</a></li><li><a href="#nomachine%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%8E%A7%E5%88%B6%E5%8F%B0">nomachine（虚拟网络控制台）</a></li><li><a href="#vnc%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%8E%A7%E5%88%B6%E5%8F%B0">VNC（虚拟网络控制台）</a></li><li><a href="#tensort">TensoRT</a><ul><li><a href="#tensort%E4%BB%8B%E7%BB%8D">TensoRT介绍：</a></li><li><a href="#%E6%A3%80%E6%9F%A5%E8%87%AA%E5%B8%A6tensorrt%E7%8E%AF%E5%A2%83%E9%80%89">检查自带TensorRT环境（选）</a></li><li><a href="#jetson-inference%E5%BA%93%E5%AE%89%E8%A3%85%E9%80%89">jetson inference库安装（选）</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85jupyter%E5%92%8Cjetcam">安装jupyter和jetcam</a></li><li><a href="#darknet%E6%A1%86%E6%9E%B6%E9%80%89">darknet框架（选）</a></li></ul></li><li><a href="#nvidia-jetson-nano-%E5%AE%89%E8%A3%85-gstreamer">Nvidia Jetson Nano 安装 GStreamer</a><ul><li><a href="#%E9%85%8D%E7%BD%AEgstreamer%E7%AE%A1%E9%81%93">配置GStreamer管道</a></li></ul></li></ul><h1 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h1><h2 id="检查nvcc"><a href="#检查nvcc" class="headerlink" title="检查nvcc"></a>检查nvcc</h2><p>jetson nano是原装了CUDA的，但是需要用户导入环境变量（导入相关的路径）才可以使用，<strong>只有环境变量导入成功后</strong>，方可在命令行使用 <code>nvcc -V</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim .bashrc<br></code></pre></td></tr></table></figure><p>在最后添加这三行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#选择一个即可</span><br><br><span class="hljs-built_in">export</span> CUDA_HOME=<span class="hljs-variable">$CUDA_HOME</span>:/usr/local/cuda<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda/bin:<span class="hljs-variable">$PATH</span><br><br><br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin<span class="hljs-variable">$&#123;PATH:+:<span class="hljs-variable">$&#123;PATH&#125;</span>&#125;</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64\                         <br><span class="hljs-variable">$&#123;LD_LIBRARY_PATH:+:<span class="hljs-variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">保存后退出，执行 <span class="hljs-built_in">source</span> ~/.bashrc，使得环境变量生效。<br></code></pre></td></tr></table></figure><p>在命令行输入 <code>nvcc -V</code> 如果正常输出，说明CUDA路径配置成功</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220225161019891.png" alt="image-20220225161019891" style="zoom:50%;" /><h2 id="安装torch和vision（可忽略）"><a href="#安装torch和vision（可忽略）" class="headerlink" title="安装torch和vision（可忽略）"></a>安装torch和vision（可忽略）</h2><ul><li><a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-9-0-now-available/72048">官网</a></li></ul><p><a href="https://blog.csdn.net/weixin_43947712/article/details/115530913">参考资料</a></p><p>安装好后测试如图：</p><p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220223224621637.png" alt="image-20220223224621637"></p><p>安装pytorch，首先CUDA的步骤得过一下可以看到nvcc -V</p><p>安装pytorch跟CUDA的版本要对应</p><img src="https://img2020.cnblogs.com/blog/1733978/202104/1733978-20210414172645876-1962676.png" alt="img" style="zoom: 67%;" width="1000"/> <p>网上找了个1.6.0的安装包通过winscp上传到jetson后离线安装下，该离线包可以到资料5、常用库和模型中获取</p><p>sudo pip3 install torch-1.6.0a0+b31f58d-cp36-cp36m-linux_aarch64.whl</p><p>sudo pip3 install torchvision</p><p>sudo pip install boto3</p><p>终端输入python3进入到python3的运行环境中测试下，import torch，我遇到的报错是ImportError:libopenblas.so.0:无法打开共享对象文件或目录，看了下这个教程:<a href="https://www.cnpython.com/qa/77454">https://www.cnpython.com/qa/77454</a></p><p>尝试安装了OpenBlas系统库问题解决了</p><p>sudo apt-get install libopenblas-dev</p><p>到python环境中</p><p>import torch</p><p>print(torch.<strong>version</strong>)</p><p>查看安装的版本</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141236206.png" alt="image-20220222141236206" width="500" /> <p>接下来继续在python3环境中测试下pytorch的功能</p><p><strong>from</strong> <strong>future</strong> <strong>import</strong> print_function</p><p><strong>import</strong> torch</p><p>x <strong>=</strong> torch**.**rand(5, 3)</p><p><strong>print</strong>(x)</p><p>输出</p><p>tensor([[0.3380, 0.3845, 0.3217],</p><p>​    [0.8337, 0.9050, 0.2650],</p><p>​    [0.2979, 0.7141, 0.9069],</p><p>​    [0.1449, 0.1132, 0.1375],</p><p>​    [0.4675, 0.3947, 0.1426]])</p><p>另外，要检查你的GPU驱动程序和CUDA是否启用，并通过PyTorch访问，运行以下命令返回是否启用CUDA驱动程序</p><p><strong>import</strong> torch</p><p>torch.cuda.is_available()</p><p>测试完毕后接下来再安装torchvision,根官网介绍,pytorch1.6吻合的torch版本为0.7.0</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141251282.png" alt="image-20220222141251282" width="500" style="zoom:50%;" /> <p>sudo apt-get install libjpeg-dev zlib1g-dev</p><p>git clone –branch v0.7.0 <a href="https://github.com/pytorch/vision">https://github.com/pytorch/vision</a> torchvision</p><p>cd torchvision</p><p>export BUILD_VERSION=0.7.0</p><p>sudo python3 setup.py install</p><p>注意:安装可能会确实一些文件，这个可以安装相应的文件来解决，例如笔者遇到的是确实一下三个文件所以按了一下三个包</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141306843.png" alt="image-20220222141306843" width="1000" style="zoom:50%;" /> <p>sudo apt install libavcodec-dev</p><p>sudo apt install libavformat-dev</p><p>sudo apt install libswscale-dev</p><p>重新sudo python3 setup.py install</p><p>到python环境中输入下代码可以查看版本是否对应</p><p>import torchvision</p><p>print(torchvision.<strong>version</strong>)</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141316874.png" alt="image-20220222141316874" width="500" style="zoom:50%;" /> <h1 id="jetson-nao其他配置"><a href="#jetson-nao其他配置" class="headerlink" title="jetson nao其他配置"></a>jetson nao其他配置</h1><h2 id="更新镜像源"><a href="#更新镜像源" class="headerlink" title="更新镜像源"></a>更新镜像源</h2><h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ggVG</span>  全选<br>dG删除<br></code></pre></td></tr></table></figure><ul><li><strong>源：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-security main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-updates main multiverse restricted universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-backports main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-security main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-updates main multiverse restricted universe<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> bionic-backports main multiverse restricted universe<br></code></pre></td></tr></table></figure><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> <span class="hljs-comment">//更新</span><br></code></pre></td></tr></table></figure><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install python3-pip python3-dev<br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install python-pip python-dev<br></code></pre></td></tr></table></figure><ul><li><strong>pip换源</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">mkdir</span> .pip<span class="hljs-comment">#创建隐藏文件夹</span><br>$ <span class="hljs-built_in">ls</span> -a  <span class="hljs-comment">#查看所有文件</span><br>$ <span class="hljs-built_in">cd</span> .pip<span class="hljs-comment">#进入文件夹</span><br>$ sudo <span class="hljs-built_in">touch</span> pip.conf<br>$ sudo vim pip.conf<br></code></pre></td></tr></table></figure><ul><li><strong>源</strong>:</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br>timeout = <span class="hljs-number">6000</span>  <br><span class="hljs-keyword">index</span>-url = http://pypi.doubanio.com/simple/  <br><span class="hljs-keyword">trusted</span>-host = pypi.doubanio.com<br></code></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/issue  <span class="hljs-comment">#查看ubantu版本</span><br></code></pre></td></tr></table></figure><p>查看Ubuntu系统版本号</p><p>根据Ubuntu的版本号，配置相关的源镜像。跳转到源文件所在的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>  /etc/apt/<br></code></pre></td></tr></table></figure><p>可以试用文件编辑工具打开sources.list文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gedit /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>直接用以下内容替换 sources.list文件中的所有内容即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>更新了源文件之后，保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="安装pytorch和torchvison"><a href="#安装pytorch和torchvison" class="headerlink" title="安装pytorch和torchvison"></a>安装pytorch和torchvison</h2><ul><li><p><a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-10-now-available/72048">官网教程</a> </p></li><li><p>版本要对应</p></li></ul><img src="https://img2020.cnblogs.com/blog/1733978/202104/1733978-20210414172645876-1962676.png" alt="img" style="zoom: 67%;" width="1000"/><ul><li><p>下载官方提供的<a href="https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl">torch-1.8.0-cp36-cp36m-linux_aarch64.whl</a>包</p></li><li><p>按照官方教程输入以下命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install python3-pip libopenblas-base libopenmpi-dev<br>$ pip3 install Cython<br>$ pip3 install numpy torch-1.8.0-cp36-cp36m-linux_aarch64.whl <span class="hljs-comment"># (按照自己torch1.8.0包的下载路径修改，此过程较慢）</span><br>$ sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev<br>$ git <span class="hljs-built_in">clone</span> --branch v0.9.0 https://github.com/pytorch/vision torchvision<br>$ <span class="hljs-built_in">cd</span> torchvision<br>$ <span class="hljs-built_in">export</span> BUILD_VERSION=0.9.0<br>$ python3 setup.py install --user <span class="hljs-comment">#时间较长</span><br></code></pre></td></tr></table></figure><ul><li>检查环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-built_in">print</span>(torch.__version__)<br><span class="hljs-built_in">print</span>(torchvision.__version__)<br>torch.cuda.is_available()<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220226195653355.png" alt="image-20220226195653355" style="zoom:50%;" /><h2 id="miniforge包管理-选"><a href="#miniforge包管理-选" class="headerlink" title="miniforge包管理(选)"></a>miniforge包管理(选)</h2><p>:bangbang:<strong><font color='red'>此内容为可非必要配置，因为jetson是arm版本无法直接安装anaconda环境，如果需要在jetson上安装anaconda可以接着往下看，若不需要，请跳过</font></strong></p><h3 id="miniforge简介"><a href="#miniforge简介" class="headerlink" title="miniforge简介"></a><a href="https://github.com/conda-forge/miniforge/releases">miniforge简介</a></h3><p>conda是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换。搞深度学习的应该都十分熟悉anaconda，但是NVIDIA Jetson Xavier NX是<strong>arm</strong>架构的，anaconda及其精简版miniconda并不支持arm64架构。现在主流的CPU架构分为Intel的x86/x64架构和ARM的ARM/ARM64两种，平常用的电脑大部分都是x86/x64的（苹果除外），Xavier使用的是ARM64，所以很多在x86/x64上能用的的东西到了它这里就不能用了。<strong>这一点请谨记，如果你在Jetson上遇到什么奇奇怪怪的例如“No such file or directory”之类的问题，第一时间要考虑是不是版本不是ARM64的版本</strong>。<br>在ARM64上的anaconda替代品是miniforge，miniforge与miniconda的区别在于miniforge的下载通道是conda-forge，其他基本没什么不同。</p><h3 id="安装miniforge"><a href="#安装miniforge" class="headerlink" title="安装miniforge"></a>安装miniforge</h3><ol><li><p>我下载的是 <code>Miniforge-pypy3-4.11.0-0-Linux-aarch64.sh</code>,,代表适用于arrch64架构下的Linux系统。（ARM64对应32位和64位分为arrch32和arrch64）</p></li><li><p>进入到miniforge的sh文件所在目录，右键打开Terminal，输入以下命令进行安装：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh Miniforge-pypy3-4.10.3-3-Linux-aarch64.sh<br></code></pre></td></tr></table></figure><ol start="3"><li>安装完毕后，添加环境变量，否则会出现<code>bash:conda Command not found</code>的错误。顺便提一下vim编辑器按a是进入编辑模式，编辑完毕后按ESC退出编辑模式，再输入:wq!是保存并退出。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑环境变量</span><br>vim ~/.bashrc<br><span class="hljs-comment"># 增加环境变量, 将&lt;username&gt;换成你的用户名</span><br><span class="hljs-built_in">export</span> PATH=/home/&lt;username&gt;/miniforge-pypy3/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># 激活环境变量</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 显示(base)</span><br><span class="hljs-built_in">source</span> activate<br></code></pre></td></tr></table></figure><ol start="4"><li>更换清华源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --prepend channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/<br>conda config --prepend channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/<br>conda config --<span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="安装pytorch、torchvision"><a href="#安装pytorch、torchvision" class="headerlink" title="安装pytorch、torchvision"></a>安装pytorch、torchvision</h3><h3 id="安装新的虚拟环境"><a href="#安装新的虚拟环境" class="headerlink" title="安装新的虚拟环境"></a>安装新的虚拟环境</h3><ul><li>这是在minigorge上安装的pytorch，若不想在虚拟环境上安装。可以参考<a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-10-now-available/72048">PyTorch for Jetson - version 1.10 now available - Jetson &amp; Embedded Systems / Jetson Nano - NVIDIA Developer Forums</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n pytorch python=3.6<span class="hljs-comment">#创建环境</span><br>conda activate pytorch<span class="hljs-comment">#激活环境</span><br><br></code></pre></td></tr></table></figure><ul><li>其他操作（看即可）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<span class="hljs-comment">#退出环境</span><br>conda remove -n pytorch --all<br><br>conda info -e<span class="hljs-comment">#查看已有环境</span><br></code></pre></td></tr></table></figure><p>激活成功会换名字</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141336662.png" alt="image-20220222141336662" width="1000" style="zoom:50%;" /><h3 id="pytorch1-8"><a href="#pytorch1-8" class="headerlink" title="pytorch1.8"></a>pytorch1.8</h3><p>直接输入命令安装PyTorch，<code>pip3</code>是python3的pip，如果没装，就换成<code>pip</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install -U future psutil dataclasses typing-extensions pyyaml tqdm seaborn<br>wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl -O torch-1.8.0-cp36-cp36m-linux_aarch64.whl <br>pip3 install torch-1.8.0-cp36-cp36m-linux_aarch64.whl<br></code></pre></td></tr></table></figure><p>如果网络不好的话，也可以先把PyTorch的whl文件下载下来，NVIDIA官方网址是：<a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-9-0-now-available/72048">https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-9-0-now-available/72048</a></p><ul><li><strong>==<font color='red'>issue:</font>==</strong></li></ul><p>如果出现<code>Illegal instruction (core dumped)</code>的错误，这是由于numpy 1.19.5和OpenBLAS冲突引起的，修改其中一项即可。选择以下两种做法之一：<br>（1）降低numpy版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install -U <span class="hljs-string">&quot;numpy==1.19.4&quot;</span><br></code></pre></td></tr></table></figure><p>(2)设置OpenBLAS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p>加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> OPENBLAS_CORETYPE=ARMV8<br></code></pre></td></tr></table></figure><p>然后激活.bashrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="orchvision-v0-9-0"><a href="#orchvision-v0-9-0" class="headerlink" title="orchvision v0.9.0"></a>orchvision v0.9.0</h3><h2 id="查看jetson信息-（jtop）"><a href="#查看jetson信息-（jtop）" class="headerlink" title="查看jetson信息 （jtop）"></a>查看jetson信息 （jtop）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pip3 install jetson-stats<br>sudo jtop<br></code></pre></td></tr></table></figure><h2 id="风扇自动控制"><a href="#风扇自动控制" class="headerlink" title="风扇自动控制"></a><a href="https://github.com/Pyrestone/jetson-fan-ctl.git">风扇自动控制</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/yin-qiyu/jetson-fan-ctl.git<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /jetson-fan-ctl <span class="hljs-comment">#进入文件夹</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python3-dev<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./install.sh<br></code></pre></td></tr></table></figure><p>现在你的风扇就可以按照温度自动调整运行速度了<br>风扇的一些设置在<code>/etc/automagic-fan/config.json</code>目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/automagic-fan/config.json<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;undefined<br>“FAN_OFF_TEMP”:20,<br>“FAN_MAX_TEMP”:50,<br>“UPDATE_INTERVAL”:2,<br>“MAX_PERF”:1<br>&#125;<br>~<br>~<br></code></pre></td></tr></table></figure><h2 id="增加Swap分区大小"><a href="#增加Swap分区大小" class="headerlink" title="增加Swap分区大小"></a>增加Swap分区大小</h2><ul><li>先查看初试交换分区大小：</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141405289.png" alt="image-20220222141405289" width="800" /><ul><li>生成swapfile文件操作如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1）新增swapfile文件大小自定义</span><br>sudo fallocate -l 6G /var/swapfile<br><span class="hljs-comment">#2）配置该文件的权限</span><br>sudo <span class="hljs-built_in">chmod</span> 600 /var/swapfile<br><span class="hljs-comment">#3）建立交换分区</span><br>sudo mkswap /var/swapfile<br><span class="hljs-comment">#4）启用交换分区</span><br>sudo swapon /var/swapfile<br></code></pre></td></tr></table></figure><ul><li>设置为自动启用swapfile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo bash -c <span class="hljs-string">&#x27;echo &quot;/var/swapfile swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab&#x27;</span><br></code></pre></td></tr></table></figure><p>设置成功后：</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141420401.png" alt="image-20220222141420401" width="1000" /><h2 id="nomachine（虚拟网络控制台）"><a href="#nomachine（虚拟网络控制台）" class="headerlink" title="nomachine（虚拟网络控制台）"></a>nomachine（虚拟网络控制台）</h2><p>官网：<a href="https://www.nomachine.com/">NoMachine - Free Remote Desktop For Everybody</a></p><ul><li><p>主机上正常安装</p></li><li><p>jetson上 </p><ul><li><p>下载好对应版本用SFTP传到jetson</p></li><li><p>```bash<br>sudo dpkg -i nomachine_7.6.2_3_arm64.deb</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>- 在同一局域网下即可连接<br><br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220403144934094.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220403144934094&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;500&quot;</span> /&gt;<br><br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220403145033336.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220403145033336&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;500&quot;</span> /&gt;<br><br><br><br><br><br><span class="hljs-comment">## VNC（虚拟网络控制台）</span><br><br>- 编辑文件<br><br>```bash<br>sudo vim /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml<br></code></pre></td></tr></table></figure></li></ul></li><li><p>滑到文末添加下段内容格式如图片所示</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;key name=<span class="hljs-string">&quot;enabled&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;<br>   &lt;summary&gt;Enable remote access to the desktop&lt;/summary&gt;<br>   &lt;description&gt;<br>    If <span class="hljs-literal">true</span>, allows remote access to the desktop via the RFB<br>    protocol. Users on remote machines may <span class="hljs-keyword">then</span> connect to the<br>    desktop using a VNC viewer.<br>   &lt;/description&gt;<br>   &lt;default&gt;<span class="hljs-literal">false</span>&lt;/default&gt;<br>  &lt;/key&gt;<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220226204438666.png" alt="image-20220226204438666" style="zoom:50%;" /><ul><li>编译文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo glib-compile-schemas /usr/share/glib-2.0/schemas<br></code></pre></td></tr></table></figure><p>完成以上步骤，正常来说就可以打开桌面共享的图标了。</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141452790.png" alt="image-20220222141452790" width="500" /><p>设置好后（不设置也可以）</p><img src="https://img-blog.csdnimg.cn/20200602124909227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE4MTM1MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  /><ul><li>配置vnc设置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gsettings <span class="hljs-built_in">set</span> org.gnome.Vino prompt-enabled <span class="hljs-literal">false</span><br>$ gsettings <span class="hljs-built_in">set</span> org.gnome.Vino require-encryption <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ul><li>设置密码（可以不要）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gsettings <span class="hljs-built_in">set</span> org.gnome.Vino authentication-methods <span class="hljs-string">&quot;[&quot;</span>vnc<span class="hljs-string">&quot;]&quot;</span><br>$ gsettings <span class="hljs-built_in">set</span> org.gnome.Vino vnc-password $(<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;请输入你的密码&quot;</span>|<span class="hljs-built_in">base64</span>)<br></code></pre></td></tr></table></figure><ul><li>配置vnc自启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gsettings <span class="hljs-built_in">set</span> org.gnome.Vino enabled <span class="hljs-literal">true</span><br>$ <span class="hljs-built_in">mkdir</span> -p ~/.config/autostart<br>$ vi  ~/.config/autostart/vino-server.desktop<br></code></pre></td></tr></table></figure><p>添加下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Desktop Entry]<br><br>Type=Application<br><br>Name=Vino VNC server<br><br>Exec=/usr/lib/vino/vino-server<br><br>NoDisplay=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><font color='red'>重启生效</font></li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo reboot<br></code></pre></td></tr></table></figure><ul><li><p>电脑端可下载<a href="https://www.realvnc.com/en/connect/download/viewer/">Download VNC Viewer | VNC® Connect (realvnc.com)</a></p></li><li><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220226204943881.png" alt="image-20220226204943881" style="zoom:33%;" /></li><li><p>配置jetson nano的ip和密码即可连接</p></li><li><ul><li><p>遇到下图提示输入电脑账户魔密码即可（是你主机的密码，不是jetson的）</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220302182808960.png" alt="image-20220302182808960" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220312224805927.png" alt="image-20220312224805927" width="500" /></li></ul></li></ul><h2 id="TensoRT"><a href="#TensoRT" class="headerlink" title="TensoRT"></a>TensoRT</h2><h3 id="TensoRT介绍："><a href="#TensoRT介绍：" class="headerlink" title="TensoRT介绍："></a>TensoRT介绍：</h3><p>​    模型加速越来越成为深度学习工程中的刚需了，最近的CVPR和ICLR会议中，模型的压缩和剪枝是受到的关注越来越多。毕竟工程上，算法工程师的深度学习模型是要在嵌入式平台跑起来，投入应用的。在模型的推理（inference）过程中，计算速度是很重要的。比如自动驾驶，如果使用一个经典的深度学习模型，很容易就跑到200毫秒的延时，那么这意味着，在实际驾驶过程中，你的车一秒钟只能看到5张图像，这当然是很危险的一件事。所以，对于实时响应比较高的任务，模型的加速时很有必要的一件事情了。</p><p>如果你使用英伟达的产品，比如PX2，那么在平台上部署模型投入应用，很多时候就需要用到专门的模型加速工具 —— TensorRT。</p><p><strong>TensorRT下的模型是在做什么？</strong></p><p>TensorRT只负责模型的推理（inference）过程，一般不用TensorRT来训练模型的哈。</p><p><strong>TensorRT能加速模型吗？</strong></p><p>能！根据官方文档，使用TensorRT，在CPU或者GPU模式下其可提供10X乃至100X的加速。本人的实际经验中，TensorRT提供了20X的加速。</p><p><strong>TensorRT为什么能提升模型的运行速度？</strong></p><p>TensorRT是英伟达针对自家平台做的加速包，TensorRT主要做了这么两件事情，来提升模型的运行速度。</p><ol><li>TensorRT支持INT8和FP16的计算。深度学习网络在训练时，通常使用 32 位或 16 位数据。TensorRT则在网络的推理时选用不这么高的精度，达到加速推断的目的。</li><li>TensorRT对于网络结构进行了重构，把一些能够合并的运算合并在了一起，针对GPU的特性做了优化。现在大多数深度学习框架是没有针对GPU做过性能优化的，而英伟达，GPU的生产者和搬运工，自然就推出了针对自己GPU的加速工具TensorRT。一个深度学习模型，在没有优化的情况下，比如一个卷积层、一个偏置层和一个reload层，这三层是需要调用三次cuDNN对应的API，但实际上这三层的实现完全是可以合并到一起的，TensorRT会对一些可以合并网络进行合并。</li></ol><img src="https://developer.nvidia.com/sites/default/files/akamai/deeplearning/tensorrt/trt-info.png" alt="img" style="zoom:50%;" /><h3 id="检查自带TensorRT环境（选）"><a href="#检查自带TensorRT环境（选）" class="headerlink" title="检查自带TensorRT环境（选）"></a>检查自带TensorRT环境（选）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/src/tensorrt/samples  <br>sudo make<span class="hljs-comment">#编译大约7分钟</span><br>../bin/sample_mnist<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141611316.png" alt="image-20220222141611316" width="300" /><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220312212555390.png" alt="image-20220312212555390" width="400" /><h3 id="jetson-inference库安装（选）"><a href="#jetson-inference库安装（选）" class="headerlink" title="jetson inference库安装（选）"></a><a href="https://github.com/dusty-nv/jetson-inference">jetson inference</a>库安装（选）</h3><p><a href="https://www.bilibili.com/read/cv13998685"> 参考资料 </a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt autoremove<br>sudo apt upgrade<br>sudo apt install cmake<br><span class="hljs-built_in">mkdir</span> ~/workspace<br><span class="hljs-built_in">cd</span> workspace<br>git <span class="hljs-built_in">clone</span> https://gitee.com/weikun-xuan/jetson-inference.git<br><span class="hljs-built_in">cd</span> jetson-inference<br>git submodule update --init<br></code></pre></td></tr></table></figure><blockquote><p>start</p></blockquote><p>一、获取源码<br>首先打开终端运行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update <br><br>sudo apt-get install git cmake libpython3-dev python3-numpy <br><br>git <span class="hljs-built_in">clone</span> --recursive https://gitee.com/weikun-xuan/jetson-inference.git<br></code></pre></td></tr></table></figure><p>上面仓库源我全都自己换了，下载会比GitHub快很多。</p><p>二、换源<br>进入到tools文件下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> jetson-inference/tools<br><br></code></pre></td></tr></table></figure><p>换下源，依次运行以下代码（均在tools文件下）：</p><p>1）模型下载国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed -in-place -e <span class="hljs-string">&#x27;s@https://nvidia.box.com/shared/static@https://bbs.gpuworld.cn/mirror@g&#x27;</span> download-models.sh<br></code></pre></td></tr></table></figure><p>2）pytorch国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed -in-place -e <span class="hljs-string">&#x27;s@https://nvidia.box.com/shared/static@https://bbs.gpuworld.cn/mirror@g&#x27;</span> install-pytorch.sh <br><br>$ sed -in-place -e <span class="hljs-string">&#x27;s@https://github.com/pytorch/vision@https://gitee.com/vcan123/pytorch@g&#x27;</span> install-pytorch.sh <br><br>$ sed -in-place -e <span class="hljs-string">&#x27;s@https://github.com/dusty-nv/vision@https://gitee.com/vcan123/dusty-nv@g&#x27;</span> install-pytorch.sh<br></code></pre></td></tr></table></figure><p>三、编译安装</p><p>在jetson-infernce文件下执行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build <br><br><span class="hljs-built_in">cd</span> build <br><br>cmake ../<br></code></pre></td></tr></table></figure><p> 接着就会出现：</p><p>模型包安装</p><p> 此步为安装模型包，本人建议【全部取消】，不然会有些慢，之后我们可以去<a href="https://github.com/dusty-nv/jetson-inference/releases">官网</a>手动下载。</p><p>我们继续：</p><p>pytorch安装</p><p> 安装pytorch。这时应该只有一个for python 3.6版本,选上然后ok。</p><p>完成后还是在build文件下依次执行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make <br><br>$ sudo make install <br><br>$ sudo ldconfig<br></code></pre></td></tr></table></figure><p>完成。</p><h2 id="安装jupyter和jetcam"><a href="#安装jupyter和jetcam" class="headerlink" title="安装jupyter和jetcam"></a>安装jupyter和jetcam</h2><ol><li><strong>安装nodejs和npm</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install --upgrade pip<span class="hljs-comment">#更新pip</span><br>sudo apt install nodejs npm    <br></code></pre></td></tr></table></figure><p>但是用直接用上面这个命令安装后的版本是比较低的后续要安装jupyterlab插件可能会报错，用一下版本可以查看,至少要12.3.0版本的node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>安装n模块，用这个模块来更新或者指定安装node的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install -g n<br></code></pre></td></tr></table></figure><p>先说明下这个模块的功能，一下命令了解下先，不用操作</p><p>清除npm缓存：npm cache clean -f</p><p>安装n模块：npm install -g n</p><p>安装官方稳定版本：n stable</p><p>安装最新官方版本：n latest</p><p>安装某个指定版本：n 11.6.0</p><p>查看已安装的node版本: n</p><p>查看当前node版本：node -v</p><p>删除指定版本：n rm 7.5.0</p><p>好的，了解完n模块的功能后来安装对应版本的node,也可以安装最新版的例如以下，</p><p>sudo n latest</p><p>安装好后，node -v 查看下版本，如果版本没有变，那么可以尝试重启下，如果还是没有变，执行</p><p>sudo n</p><p>会出现一个画面，可以看到我们安装过的node版本名，例如我们这里是v15.0.1，通过上下方向按键控制光标选择这个版本，然后回车镜像安装，然后查看下版本，如果还是没有变，一般再重启下就可以了。</p><ol start="2"><li><strong>安装jupyterlab</strong>：（警告忽略，失败多次执行即可）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pip3 install jupyter jupyterlab<br><br>sudo jupyter labextension install @jupyter-widgets/jupyterlab-manager<br><br>sudo jupyter labextension install @jupyterlab/statusbar<br></code></pre></td></tr></table></figure><p>生成相应配置文件：（如果某个文件报权限问题，可以尝试用sudo chmod 777赋予权限）</p><p>jupyter lab –generate-config</p><p>设置进入notebook的密码（这里会要设置两次，第二次为确认输入的密码）：</p><p>jupyter notebook password</p><p>当第一次登录使用notebook时需要输入你在这里设置的密码才能进入，请务必记住的当前设置的密码！</p><p>设置开机自启动jupterlab，create_jupyter_service.py文件</p><p>运行create_jupyter_service.py文件产生jupyter_service.service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 create_jupyter_service.py<br></code></pre></td></tr></table></figure><p>然后将产生的该服务文件移动至系统服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> nano_jupyter.service /etc/systemd/system/nano_jupyter.service<br></code></pre></td></tr></table></figure><p>使能该服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> nano_jupyter.service<br></code></pre></td></tr></table></figure><p>手动开启该服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start nano_jupyter.service<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>安装jetcam</strong></li></ol><p>JetCam是用于NVIDIA Jetson的易于使用的Python相机界面。使用Jetson的<a href="https://developer.download.nvidia.com/embedded/L4T/r32_Release_v1.0/Docs/Accelerated_GStreamer_User_Guide.pdf?uIzwdFeQNE8N-vV776ZCUUEbiJxYagieFEqUoYFM9XSf9tbslxWqFKnVHu8erbZZS20A7ADAIgmSQJvXZTb0LkuGl9GoD5HJz4263HcmYWZW0t2OeFSJKZOfuWZ-lF51Pva2DSDtu2QPs-junm7BhMB_9AMQRwExuDb5zIhf_o8PIbA4KKo">Accelerated GStreamer插件可</a>与各种USB和CSI摄像机配合使用。轻松读取图像作为numpy数组image = camera.read()。设置相机以running = True将回调附加到新框架。JetCam使在Python中创建AI项目的原型变得容易，尤其是在<a href="http://github.com/NVIDIA-AI-IOT/jetcard">JetCard中</a>安装的Jupyter Lab编程环境中。</p><p>接下来开始安装:</p><p>git clone <a href="https://github.com/NVIDIA-AI-IOT/jetcam">https://github.com/NVIDIA-AI-IOT/jetcam</a></p><p>cd jetcam</p><p>sudo python3 setup.py install</p><p>详细的使用即函数可以到<a href="https://github.com/NVIDIA-AI-IOT/jetcam%E6%9F%A5%E7%9C%8B">https://github.com/NVIDIA-AI-IOT/jetcam查看</a></p><h2 id="darknet框架（选）"><a href="#darknet框架（选）" class="headerlink" title="darknet框架（选）"></a>darknet框架（选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/AlexeyAB/darknet.git <span class="hljs-comment">#下载darknet框架</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> darknet<br><br>$ sudo vim Makefile   <span class="hljs-comment">#修改Makefile</span><br></code></pre></td></tr></table></figure><ul><li>将<code>Makefile</code>的前三行修改一下</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141647174.png" alt="image-20220222141647174" width="300" /><ul><li>和如图所示的nvcc位置（若前面配置了环境变量则无需这一步操作）</li></ul><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220222141654527.png" alt="image-20220222141654527" width="500" /><ul><li><p>修改好猴按<code>esc</code>左下角出现冒号后<code>wq</code>保存退出</p></li><li><p>在darknet路径下编译</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make -j4<br></code></pre></td></tr></table></figure><p>编译完成如图</p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220224143750683.png" alt="image-20220224143750683" width='2000' style="zoom:25%;" /><p>在命令行下输入  <code>./darknet</code></p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/image-20220224143905042.png" alt="image-20220224143905042"  style="zoom:50%;" /><p>在yolo官网下载yolov4和yolov4-tiny的权重文件放入文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Yolov4图片的检测</span><br>./darknet detect cfg/yolov4.cfg yolov4.weights data/dog.jpg <span class="hljs-comment"># 简写版</span><br><br>./darknet detector <span class="hljs-built_in">test</span> cfg/coco.data cfg/yolov4.cfg yolov4.weights data/dog.jpg <span class="hljs-comment"># 完整版</span><br><br> <br><span class="hljs-comment">#Yolov4-tiny图片的检测</span><br>./darknet detect cfg/yolov4-tiny.cfg yolov4-tiny.weights data/dog.jpg <span class="hljs-comment"># 简写版</span><br><br>./darknet detector <span class="hljs-built_in">test</span> cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights data/dog.jpg <span class="hljs-comment"># 完整版</span><br><br> <br><span class="hljs-comment"># 改变检测阈值</span><br><span class="hljs-comment"># 默认情况下，YOLO仅显示检测到的置信度为.25或更高的对象。您可以通过将-thresh标志传递给yolo命令来更改此设置。</span><br><br><span class="hljs-comment">#例如，要显示所有检测，您可以将阈值设置为0.1：</span><br>./darknet detect cfg/yolov4-tiny.cfg yolov4-tiny.weights data/dog.jpg -thresh 0.1<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Yolov4摄像头实时检测方法：</span><br>./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights /dev/video1<br> <br><span class="hljs-comment">#Yolov4-tiny摄像头实时检测方法：</span><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights /dev/video1<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Yolov4视频的检测(github下来的data里面并没有该视频文件，需要用户自行上传要检测的视频文件到data文件夹下)</span><br>./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights data/123.mp4<br><br><span class="hljs-comment">#Yolov4-tiny视频的检测</span><br><span class="hljs-comment">#Yolov4-tiny视频的检测(github下来的data里面并没有该视频文件，需要用户自行上传要检测的视频文件到data文件夹下)</span><br><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights data/xxx.mp4 <br><br></code></pre></td></tr></table></figure><ul><li>若要调用csi摄像头需要gstream的支持</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv  ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44360908/article/details/122777848"> 解决Jetson Nano使用CSI摄像头在Darknet下实时检测绿屏_</a></p><h1 id="Nvidia-Jetson-Nano-安装-GStreamer"><a href="#Nvidia-Jetson-Nano-安装-GStreamer" class="headerlink" title="Nvidia Jetson Nano 安装 GStreamer"></a>Nvidia Jetson Nano 安装 GStreamer</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository universe<br>sudo add-apt-repository multiverse<br>sudo apt-get update<br>sudo apt-get install gstreamer1.0-tools gstreamer1.0-alsa gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav<br>sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev <br></code></pre></td></tr></table></figure><h2 id="配置GStreamer管道"><a href="#配置GStreamer管道" class="headerlink" title="配置GStreamer管道"></a>配置GStreamer管道</h2><p>首先说一下思路：由于yolov3本身不支持csi摄像头，因此需要通过GStreamer来对csi摄像头获取的视频进行预处理，然后提交给yolov3进行识别判定，而这一过程重点就是GStreamer管道的配置，以下是博主的管道配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 仅适用于jetson-nano运行yolov4-tiny demo。注意请在darknet的文档页下打开terminal输入</span><br><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br></code></pre></td></tr></table></figure><p>原版：</p><p>./darknet detector demo ok/new.data ok/yolov4-tiny-new.cfg ok/yolov4-tiny-new_last.weights “nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink”</p><p>口罩</p><p>./darknet detector demo cfg/obj.data cfg/yolov4-tiny-masks.cfg yolov4-tiny-obj_last.weights “nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink”</p><p>yolo:</p><p>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights “nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository universe<br>sudo add-apt-repository multiverse<br>sudo apt-get update<br>sudo apt-get install gstreamer1.0-tools gstreamer1.0-alsa gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav<br>sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">官方：<br>./darknet detector demo ok/new.data ok/yolov4-tiny-new.cfg ok/yolov4-tiny-new_last.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br>// 仅适用于jetson-nano运行yolov3-tiny demo。注意请在darknet的文档页下打开terminal输入<br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br><br><br>./darknet detector demo cfg/coco.data cfg/yolov4-tiny.cfg yolov4-tiny.weights <span class="hljs-string">&quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), width=1280, height=720, format=NV12, framerate=30/1 ! nvvidconv flip-method=2 ! video/x-raw, width=1280, height=720, format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jetson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/06/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：<br>```py<br>print(“Hello”)<br>```</p><p>注意：这里因为我放在md文件中的，所以加上了\，不解析```，实际测试时请去掉\。</p><p>图片测试：</p><p><img src="https://raw.githubusercontent.com/yin-qiyu/picbed/master/img/202206191613522.jpg" alt="752DC45340FCAFD344A53853C3E3B0F7"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/18/hello-world/"/>
    <url>/2022/06/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
